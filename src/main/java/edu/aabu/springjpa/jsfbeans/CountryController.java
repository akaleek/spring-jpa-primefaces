/*
 * Created on 24 Sep 2017 ( Time 19:26:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package edu.aabu.springjpa.jsfbeans;

import edu.aabu.springjpa.jsfbeans.util.JsfUtil;
import edu.aabu.springjpa.model.Country;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.component.UIComponent;
import java.util.List;
import java.io.Serializable;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

import java.util.Arrays;
import java.util.List;

import edu.aabu.springjpa.service.CountryService;
import org.springframework.beans.factory.annotation.Autowired;

@ManagedBean(name = "countryJsfController")
@SessionScoped
public class CountryController implements Serializable {

    @ManagedProperty("#{countryService}")
    private CountryService countryService;

    private List<Country> items = null;
    private Country selected;

    public Country getSelected() {
        return selected;
    }

    public void setSelected(Country selected) {
        this.selected = selected;
    }

    public CountryController() {
    }

    //@Override
    protected void setEmbeddableKeys() {
    }

    //@Override
    protected void initializeEmbeddableKey() {
    }

    public Country prepareCreate() {
        selected = new Country();
        initializeEmbeddableKey();
        return selected;
    }

    public void create() {

        countryService.addCountry(selected);
        if (!JsfUtil.isValidationFailed()) {
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public void update() {
        countryService.updateCountry(selected);
        if (!JsfUtil.isValidationFailed()) {
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public void destroy() {
        countryService.deleteCountry(selected.getId());
        if (!JsfUtil.isValidationFailed()) {
            selected = null; // Remove selection
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public List<Country> getItems() {
        System.out.println("items  " + items);
        if (items == null) {
        System.out.println("items if  " + items);
            items = countryService.getAllCountries();
        System.out.println("items if after  " + items);
        }
        System.out.println("items end  " + items);
        return items;
    }

    public CountryService getCountryService() {
        return countryService;
    }

    public void setCountryService(CountryService countryService) {
        this.countryService = countryService;
    }

    @FacesConverter(forClass = Country.class)
    public static class CountryControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            CountryController controller = (CountryController) facesContext.getApplication().getELResolver().getValue(facesContext.getELContext(), null, "countryController");
            //return controller.getCountry(getKey(value));
            return controller.getCountryService().getCountry(Integer.parseInt(value));

            //return controller.getFacade().find(Integer id);
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof Country) {
                Country o = (Country) object;
                StringBuilder sb = new StringBuilder();
                sb.append(o.getId());
                return sb.toString();
            } else {
                System.out.printf("object {0} is of type {1}; expected type: {2}", new Object[]{object, object.getClass().getName(), Country.class.getName()});
                return null;
            }
        }

    }
//---------------------------
}
